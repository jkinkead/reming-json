/*
 * Copyright (C) 2011,2012 Mathias Doenitz, Johannes Rudolph
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package spray.json.streaming

import spray.json.ProductFormats

import scala.reflect.{ classTag, ClassTag }

trait ProductStreamFormatsInstances { self: ProductStreamFormats with StandardStreamFormats =>
[#  // Case classes with 1 parameters

  def jsonStreamFormat1[[#P1 :JSF#], T <: Product :ClassTag](construct: ([#P1#]) => T): JsonStreamFormat[T] = {
    val Array([#p1#]) = ProductFormats.extractFieldNames(classTag[T])
    jsonStreamFormat(construct, [#p1#])
  }
  def jsonStreamFormat[[#P1 :JSF#], T <: Product](construct: ([#P1#]) => T, [#fieldName1: String#]): JsonStreamFormat[T] = new JsonStreamFormat[T]{
    def write(p: T, printer: JsonStreamPrinter): Unit = {
      printer.startObject()
      [#writeProductElement[P1](fieldName1, p, 0, printer)#
      ]
      printer.endObject()
    }
    def read(parser: PullParser): T = {
      parser.startObject()
      [#val p1V = parser.readField[P1](fieldName1)#
      ]
      parser.endObject()
      construct([#readObjectValue(p1V)#])
    }
  }#
]
}
